user  nginx;

worker_processes  auto;
worker_rlimit_nofile 65535;

pid /var/run/nginx.pid;

events {
    use epoll;
    multi_accept on;
    worker_connections  102400;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    server_tokens off;

    error_log  /dev/stderr;
    access_log /dev/stdout;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format json escape=json '{'
        '"@timestamp": "$time_iso8601", '
        '"user_id": "$user_id", '
        '"client_ip": "$remote_addr", '
        '"xff": "$http_x_forwarded_for", '
        '"server_ip": "$server_addr", '
        '"method": "$request_method", '
        '"uri": "$request_uri", '
        '"http_protocol": "$server_protocol", '
        '"response_code": "$status", '
        '"request_length": "$request_length", '
        '"request_body": "$request_body", '
        '"sent": "$bytes_sent", '
        '"body_bytes_sent": "$body_bytes_sent", '
        '"upstream_status": "$upstream_status", '
        '"upstream_response_time": "$upstream_response_time", '
        '"upstream_connect_time": "$upstream_connect_time", '
        '"upstream_header_time": "$upstream_header_time", '
        '"referer": "$http_referer", '
        '"agent": "$http_user_agent", '
        '"connection": "$connection", '
        '"pipe": "$pipe", '
        '"connection_requests": "$connection_requests"'
    '}';

    sendfile on;

    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout  65;

    gzip  on;
    gzip_min_length 1024;
    gzip_comp_level 2;
    gzip_types text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;
    gzip_vary on;
    gzip_disable "msie6";

    types_hash_max_size 2048;
    client_max_body_size 20M;
    client_body_buffer_size 128k;

    lua_code_cache off;
    lua_need_request_body on;
    lua_shared_dict waf 32k;
    lua_shared_dict list 10m;
    lua_shared_dict limiter 10m;
    lua_shared_dict counter 10m;
    lua_package_path "${prefix}lua/?.lua;;";
    init_worker_by_lua_block {
        if ngx.worker.id() == 0 then
            ngx.timer.at(0, require("resty.waf").init)
            -- local delay = 30
            -- local shared = require("shared")
            -- ngx.timer.at(0, shared.reload_config)
            -- ngx.timer.at(0, shared.reload_list)
            -- local ok, err = ngx.timer.every(delay, shared.reload_config)
            -- if not ok then
            --   ngx.log(ngx.ERR, "failed to create the timer: ", err)
            --   return
            -- end
        end
    }

    access_by_lua_block {
        local waf = require("resty.waf")
        waf.run({
            "filter",
            "limiter",
            "counter",
            "manager",
        })
    }

    charset UTF-8;

    server {
        listen       80;
        server_name  localhost;
        sendfile off;
        error_log  /dev/stderr;
        access_log /data/access.log  json;
        root /data/public;
        index  index.html index.htm;

        location / {
            set $user_id 0;
            log_by_lua_block {
                local jwt = require "resty.jwt"
                local jwt_token = nil
                local auth_header = ngx.var.http_Authorization
                if auth_header then
                    _, _, jwt_token = string.find(auth_header, "Bearer%s+(.+)")
                end
                local jwt_obj = (jwt_token ~= nil and jwt:load_jwt(jwt_token) or nil)
                ngx.var.user_id = jwt_obj ~= nil and jwt_obj.payload ~= nil and jwt_obj.payload.sub or 0
            }
        }
    }
}
